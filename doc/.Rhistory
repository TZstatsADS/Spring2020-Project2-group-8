render
c$render
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip")) install_github('arilamstein/choroplethrZip@v1.4.0')
if (!require("ggplot2")) {
library(devtools)
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
}
if (!require("ggmap")) install.packages("ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
install.packages("ggplot2")
install_github('arilamstein/choroplethrZip@v1.5.0')
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
install.packages("choroplethr")
install.packages("ggplot2")
install.packages("ggmap")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip")) install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) {
library(devtools)
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
}
if (!require("ggmap")) install.packages("ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
NYC_map = get_googlemap(center = "New York", maptype = "roadmap",
zoom = 11, size = c(640, 420), color = "bw")
ggmap(NYC_map, extent = "device") +
geom_point(data = mh2009.selgeo, aes(x = lon, y = lat),
color = "#0571b0", size = 3)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
library(ggmap)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
names(mh2009.selgeo)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
down vote
I ran into this problem as well today, and I had to install the GitHub development versions of ggplot2 and ggmap and restart R to get rid of this error:
devtools::install_github("dkahle/ggmap")
down vote
I ran into this problem as well today, and I had to install the GitHub development versions of ggplot2 and ggmap and restart R to get rid of this error:
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap", force=TRUE)
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=9,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=13,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
shiny::runApp('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
if(!require("ggmap")) install.packages('ggmap')
library(choroplethrZip)
if (!require("choroplethrZip")) install.packages("choroplethrZip")
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
View(mh2009.selgeo)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(30)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
mh2009.selgeo=mh2009.selgeo%>%
na.omit()
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
View(mh2009.selgeo)
library(ggmap)
ggmap(get_map("New York City",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybird",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybrid",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybrid",
zoom=12, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("Manhattan",source="google",
maptype = "hybrid",
zoom=12, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
load("../output/menu_nutrition_location")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
menu_raw <-read_csv("C:/Users/jiaoh/OneDrive/桌面/MenuStat.csv")
location_raw <- read_csv("C:/Users/jiaoh/OneDrive/桌面/NY Restaurant Location.csv")
menu<-menu_raw[,-c(19,24:45)]# no nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename("menu"=data)
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
x<-location_raw%>%group_by(CAMIS)%>%arrange(desc(`INSPECTION DATE`))%>%select(CAMIS,BORO:ZIPCODE,`INSPECTION DATE`,Latitude,Longitude)%>%unique%>%top_n(1,`INSPECTION DATE`)
location<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location)
location_name<-res_location%>%group_by(DBA)%>%nest()
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T)) #index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched cor in location
# yy[index] ## check
# name_menu[index]  #matched store
# name_menu[!index] #unmatched store
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%mutate(id=row_number())
location_join<-location_name%>%ungroup%>%mutate(id=row_number())%>%right_join(joinname,by=c("id"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("id"="menuid"))%>%unnest%>%select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
save(menu_nutrition_location, file="../output/menu_nutrition_location.RDatautrition_location.RData")
menu_nutrition_location
menu_nutrition_location[1,]->x
x
x%>%unnest(menu)
x%>%unnest(location)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename("menu"=data)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename("menu"="data")
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu="data")
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=count())%>%arrange(desc(n))
menu_name<-menu%>%group_by(restaurant)%>%count()%>%arrange(desc(n))
menu_name
View(menu_nutrition_location)
View(menu_nutrition_location)
View(menu_nutrition_location[[3]][[1]])
View(menu_nutrition_location[[3]][[1]])
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T)) #index
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T)) #index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched cor in location
name_menu[index]
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%mutate(id=row_number())
location_join<-location_name%>%ungroup%>%mutate(id=row_number())%>%right_join(joinname,by=c("id"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("id"="menuid"))%>%unnest%>%select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
joinname
menu_join
location_join
loc_info
loc_info%>%unnest
menu_nutrition_location
menu_nutrition_location$location%>%unnest
menu_nutrition_location%>%select(location)%>%unnest
loc_info
loc_info[1:2,]
loc_info[1,]%》%unnest
loc_info[1,]%>%unnest
loc_info[2,]%>%unnest
yy[index]
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
joinname
menu_join<-menu_name[index,]%>%mutate(id=row_number())
menu_join
seq_along(coord)
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
joinname
menu_join
menu_join<-menu_name[index,]%>%mutate(menuid=row_number())
menu_join
joinname
location_name%>%ungroup%>%mutate(locationid=row_number())
location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
location_join
menu_join
inner_join(menu_join,location_join,by=c("menuid"="menuid"))
location_join
menu_join
location_join
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
menu_join
inner_join(menu_join,location_join,by=c("menuid"="menuid"))
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
location_join
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%nest()%>%rename("location"=data)
loc_info
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
menu_nutrition_location
menu_nutrition_location%>%select(location)%>%unnest
(menu_nutrition_location%>%select(location))[8,%>%unnest
(menu_nutrition_location%>%select(location))[8,]%>%unnest
menu_nutrition_location%>%select(location)->x
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
menu_raw <-read_csv("C:/Users/jiaoh/OneDrive/桌面/MenuStat.csv")
location_raw <- read_csv("C:/Users/jiaoh/OneDrive/桌面/NY Restaurant Location.csv")
menu<-menu_raw[,-c(19,24:45)]# no nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
x<-location_raw%>%group_by(CAMIS)%>%arrange(desc(`INSPECTION DATE`))%>%select(CAMIS,BORO:ZIPCODE,`INSPECTION DATE`,Latitude,Longitude)%>%unique%>%top_n(1,`INSPECTION DATE`)
location<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location)
location_name<-res_location%>%group_by(DBA)%>%nest()
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T)) #index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched cor in location
# yy[index] ## check
# name_menu[index]  #matched store
# name_menu[!index] #unmatched store
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
save(menu_nutrition_location, file="../output/menu_nutrition_location.RDatautrition_location.RData")
menu_raw <-read_csv("../data/MenuStat.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
menu_raw <-read_csv("../data/MenuStat.csv")
# This file is more than 100 MB, please download (in readme) and load it by yourself.
location_raw <- read_csv("C:/Users/jiaoh/OneDrive/桌面/NY Restaurant Location.csv")
menu<-menu_raw[,-c(19,24:45)]# no nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
x<-location_raw%>%group_by(CAMIS)%>%arrange(desc(`INSPECTION DATE`))%>%select(CAMIS,BORO:ZIPCODE,`INSPECTION DATE`,Latitude,Longitude)%>%unique%>%top_n(1,`INSPECTION DATE`)
location<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location)
location_name<-res_location%>%group_by(DBA)%>%nest()
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T)) #index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched cor in location
# yy[index] ## check
# name_menu[index]  #matched store
# name_menu[!index] #unmatched store
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
save(menu_nutrition_location, file="../output/menu_nutrition_location.RDatautrition_location.RData")
library(tidyverse)
library(tidyverse)
menu_raw <-read_csv("../data/MenuStat.csv")
# This file is more than 100 MB, please download (url given in readme) and load it by yourself.
location_raw <- read_csv("C:/Users/jiaoh/OneDrive/桌面/NY Restaurant Location.csv")
menu<-menu_raw[,-c(19,24:45)]# no nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
menu<-menu_raw[,-c(19,24:45)]# no nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
x<-location_raw%>%group_by(CAMIS)%>%arrange(desc(`INSPECTION DATE`))%>%
select(CAMIS,BORO:ZIPCODE,`INSPECTION DATE`,Latitude,Longitude)%>%
unique%>%top_n(1,`INSPECTION DATE`)
location<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location)
location_name<-res_location%>%group_by(DBA)%>%nest()
#Replace the name of restaurant in order to make matching process easier.
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T)) #index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched cor in location
# yy[index] ## check
# name_menu[index]  #matched store
# name_menu[!index] #unmatched store
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
# Delete nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu<-menu_raw[,-c(19,24:45)]
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
menu_info
menu_name
x
location<-location_raw%>%select(CAMIS,DBA)%>%unique
.location
location
location_name<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location_name)
location_name<-res_location%>%group_by(DBA)%>%nest()
location_name
# Restaurant name from "location"
location<-location_raw%>%select(CAMIS,DBA)%>%unique
res_location<- left_join(x,location)
res_location
location_name<-res_location%>%group_by(DBA)%>%nest()
location_name
res_location
# Nested Location information
location_name<- left_join(x,location)%>%group_by(DBA)%>%nest()
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T))           #matched index
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T))           #matched index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
menu_join
location_join
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
menu_raw <-read_csv("../data/MenuStat.csv")
# This file is more than 100 MB, please download (url given in readme) and load it by yourself.
location_raw <- read_csv("C:/Users/jiaoh/OneDrive/桌面/NY Restaurant Location.csv")
# Delete nutrition_text and nutrition_100g col, potassium col (since only 5k entry have value)
menu<-menu_raw[,-c(19,24:45)]
# Nested menu information
menu_info<-menu%>%group_by(restaurant)%>%nest()%>%rename(menu=data)
# Restaurant name from "menu"
menu_name<-menu%>%group_by(restaurant)%>%summarise(n=n())%>%arrange(desc(n))
# Restaurant location
x<-location_raw%>%group_by(CAMIS)%>%arrange(desc(`INSPECTION DATE`))%>%
select(CAMIS,BORO:ZIPCODE,`INSPECTION DATE`,Latitude,Longitude)%>%
unique%>%top_n(1,`INSPECTION DATE`)
# Restaurant name from "location"
location<-location_raw%>%select(CAMIS,DBA)%>%unique
# Nested Location information
location_name<- left_join(x,location)%>%group_by(DBA)%>%nest()
#Replace the name of restaurant in order to make matching process easier.
name_menu<-menu_name$restaurant%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
name_loc<-location_name$DBA%>%str_replace_all("'s", "")%>%str_replace_all("Shop", "")%>%str_replace_all("`S", "")%>%str_replace_all(" ", "")
xx<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T))           #matched index
yy<-name_menu%>%map(~grep(.x,name_loc, ignore.case = T,value = T)) #matched name
index<-xx%>%map(~(length(.x)>0))%>%unlist #successful matched index in menu
coord<-xx[index]                          #successful matched coordinate in location
# yy[index] ## check
# name_menu[index]  #matched store
# name_menu[!index] #unmatched store
joinname<-NULL
for (i in seq_along(coord)){
joinname<-rbind(joinname,tibble(locationid=coord[[i]],menuid=i))
}
menu_join<-menu_name[index,]%>%ungroup%>%mutate(menuid=row_number())
location_join<-location_name%>%ungroup%>%mutate(locationid=row_number())%>%right_join(joinname,by=c("locationid"="locationid"))%>%unnest%>%group_by(menuid)%>%nest
loc_info<-inner_join(menu_join,location_join,by=c("menuid"="menuid"))%>%unnest%>%
select(restaurant,BORO,BUILDING,STREET,ZIPCODE,Latitude,Longitude)%>%group_by(restaurant)%>%
nest()%>%rename("location"=data)
menu_nutrition_location<-left_join(loc_info,menu_info,by="restaurant")
save(menu_nutrition_location, file="../output/menu_nutrition_location.RDatautrition_location.RData")
menu_nutrition_location
